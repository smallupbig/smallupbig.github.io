(window.webpackJsonp=window.webpackJsonp||[]).push([[32],{214:function(e,t,a){"use strict";a.r(t);var r=a(0),_=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("p",[e._v("[TOC]")]),e._v(" "),a("h2",{attrs:{id:"生成、打包、部署和管理应用程序及类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#生成、打包、部署和管理应用程序及类型","aria-hidden":"true"}},[e._v("#")]),e._v(" 生成、打包、部署和管理应用程序及类型")]),e._v(" "),a("h4",{attrs:{id:"net-framework-部署目标"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#net-framework-部署目标","aria-hidden":"true"}},[e._v("#")]),e._v(" .NET Framework 部署目标")]),e._v(" "),a("p",[e._v("所有的应用程序都使用来自 Microsoft 或其他厂商的动态链接库（Dynamic-Link Library， DLL）。由于应用程序要执行多个厂商的代码，所以任何一段代码的开发人员都不能百分百保证别人以什么方式使用这段代码。")]),e._v(" "),a("p",[e._v("对于用户来说，一家厂商更新代码时，经常都不可能重新测试和调试之前发布的所有应用程序，无法保证自己的更改不会造成不希望的结果。")]),e._v(" "),a("h4",{attrs:{id:"将类型生成到模块中"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将类型生成到模块中","aria-hidden":"true"}},[e._v("#")]),e._v(" 将类型生成到模块中")]),e._v(" "),a("p",[e._v("生成的文件是标准 PE（可移植执行体， Portable Executable）文件。32 位和 64 位的 Windows 都可以加载。")]),e._v(" "),a("p",[e._v("Windows 支持三种应用程序：")]),e._v(" "),a("ol",[a("li",[e._v("控制台用户界面（Console User Interface，CUI）使用 /t:exe")]),e._v(" "),a("li",[e._v("生成图形用户界面（Graphical User Interface， GUI）使用 /t:winexe")]),e._v(" "),a("li",[e._v("生成 Windows Store 使用 /t:appcontainerexe")])]),e._v(" "),a("h5",{attrs:{id:"响应文件"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#响应文件","aria-hidden":"true"}},[e._v("#")]),e._v(" 响应文件")]),e._v(" "),a("p",[e._v("响应文件是包含一组编译器命令行开关的文本文件。执行 CSC.exe 时，编译器打开响应文件，并使用其中包含的所有开关。")]),e._v(" "),a("p",[e._v("C# 编译器支持多个响应文件。")]),e._v(" "),a("p",[e._v("引用所有这些程序集对编译器的速度有一点影响。但是，如果源代码没有引用上述任何程序集定义的类型和成员，就不会影响最终的程序集文件，也不会影响程序的执行性能。")]),e._v(" "),a("h4",{attrs:{id:"元数据概述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#元数据概述","aria-hidden":"true"}},[e._v("#")]),e._v(" 元数据概述")]),e._v(" "),a("p",[e._v("托管 PE 文件：")]),e._v(" "),a("ol",[a("li",[e._v("PE32（+）头\n是 Windows 要求的标准信息。")]),e._v(" "),a("li",[e._v("CLR 头：小的信息块，是需要 CLR 的模块（托管模块）特有的。\n包含模块生成时所面向的 CLR 的 major(主)和 minor（次）版本号：\n一些标志（flag），\n一个 MethodDef token，该 token 指定了模块的入口方法（前提是该模块是 CUI、GUI 或 Windows Store 的执行体），\n一个可选的强名称数字签名，还包含模块内部的一些元数据表的大小和偏移量。\n可以查看 CorHdr.h 头文件定义的 IMAGE_COR20_HEADER 来了解")]),e._v(" "),a("li",[e._v("元数据：几个表构成的二进制数据块\n"),a("ul",[a("li",[e._v("定义表（definition table）")]),e._v(" "),a("li",[e._v("引用表（reference table）")]),e._v(" "),a("li",[e._v("清单表（manifest table）")])])]),e._v(" "),a("li",[e._v("IL")])]),e._v(" "),a("h4",{attrs:{id:"将模块合并成程序集"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#将模块合并成程序集","aria-hidden":"true"}},[e._v("#")]),e._v(" 将模块合并成程序集")]),e._v(" "),a("p",[e._v("Program.exe 并非只是含有元数据的 PE 文件，它还是"),a("strong",[e._v("程序集")]),e._v("。程序集是一个或多个类型定义文件及资源文件的集合。")]),e._v(" "),a("p",[e._v("在程序集的所有文件中，有一个文件容纳了"),a("strong",[e._v("清单（manifest）")]),e._v("。清单也是一个元数据表集合，表中主要包含作为程序集组成部分的那些文件的名称。此外，还描述了程序集的版本、语言文化、发布者、公开导出的类型以及构成程序集的所有文件。")])])},[],!1,null,null,null);t.default=_.exports}}]);