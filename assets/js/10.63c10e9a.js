(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{193:function(e,t,a){"use strict";a.r(t);var r=a(0),n=Object(r.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"枚举"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#枚举","aria-hidden":"true"}},[e._v("#")]),e._v(" 枚举")]),e._v(" "),a("h2",{attrs:{id:"定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义","aria-hidden":"true"}},[e._v("#")]),e._v(" 定义")]),e._v(" "),a("ol",[a("li",[a("strong",[e._v("值")]),e._v("类型：直接存储数据")]),e._v(" "),a("li",[e._v("只有"),a("strong",[e._v("一种")]),e._v("类型的成员：命名的整数型变量")])]),e._v(" "),a("h2",{attrs:{id:"特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特点","aria-hidden":"true"}},[e._v("#")]),e._v(" 特点")]),e._v(" "),a("ol",[a("li",[e._v("每个枚举成员都被赋予一个底层类型的常量值")]),e._v(" "),a("li",[a("strong",[e._v("默认")]),e._v("情况下，第一个成员被赋值为"),a("strong",[e._v("0")]),e._v("，后续成员的值比以前的值多1")]),e._v(" "),a("li",[e._v("枚举名 : [类型名]，就可以使用int以外的"),a("strong",[e._v("整数类型")])]),e._v(" "),a("li",[e._v("成员常量的值可以是底层类型的任何值，不能有重复的名字，但是可以有重复的值。")])]),e._v(" "),a("h2",{attrs:{id:"赋值规则"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#赋值规则","aria-hidden":"true"}},[e._v("#")]),e._v(" 赋值规则")]),e._v(" "),a("ol",[a("li",[e._v("未被显式赋值的成员变量会比前一个成员多1")])]),e._v(" "),a("h2",{attrs:{id:"示例"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#示例","aria-hidden":"true"}},[e._v("#")]),e._v(" 示例")]),e._v(" "),a("ul",[a("li",[e._v("声明一个枚举类")])]),e._v(" "),a("div",{staticClass:"language-C# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Hero {\n    Pig,    //默认为0\n    Dog,    //1\n    Egg     //2\n}\n")])])]),a("ul",[a("li",[e._v("显式声明一个枚举类")])]),e._v(" "),a("div",{staticClass:"language-C# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("\nenum Hero {\n    Pig = 10,\n    Dog = 15,\n    Egg = 15 //可以有重复的值\n}\n")])])]),a("ul",[a("li",[e._v("枚举值可以赋值给枚举类")])]),e._v(" "),a("div",{staticClass:"language-C# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("class Progrom {\n    static void main(){\n        Hero h1 = H1.Pig;\n        Hero h2 = H1.Dog;\n        Hero h3 = new Hreo();\n        h3 = (Hero)1;\n        Console.WriteLine(h3);//Dog\n        h3 = (Hero)3;\n        Console.WriteLine(h3);//3\n        Console.WriteLine(h);\n    }\n}\n")])])]),a("ul",[a("li",[e._v("设置底层类型和显式值")])]),e._v(" "),a("div",{staticClass:"language-C# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("enum Hero : double {\n}\n")])])]),a("ul",[a("li",[e._v("和 int,string 之间的转换\n"),a("ol",[a("li",[a("p",[e._v("枚举 => int\n"),a("code",[e._v("int num = (int)Hero.Pig //0")])])]),e._v(" "),a("li",[a("p",[e._v("int => 枚举\n"),a("code",[e._v("Hero hero = (Hero)0;//Hero.Pig")])])]),e._v(" "),a("li",[a("p",[e._v("枚举 => string\n"),a("code",[e._v('string str = Hero.Pig.toString();//"Pig"')])])]),e._v(" "),a("li",[a("p",[e._v("数值或枚举常数的名称 => 枚举")]),e._v(" "),a("div",{staticClass:"language-C# extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('Hero hero = (Hero)Enum.Parse(typeof(Hero), "Pig");//Hero.Pig\nHero hero = (Hero)Enum.Parse(typeof(Hero), "0");//Hero.Pig\n')])])])])])])])])},[],!1,null,null,null);t.default=n.exports}}]);