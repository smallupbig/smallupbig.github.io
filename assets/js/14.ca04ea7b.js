(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{190:function(t,a,e){"use strict";e.r(a);var n=e(0),r=Object(n.a)({},function(){var t=this,a=t.$createElement,e=t._self._c||a;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("h3",{attrs:{id:"三元表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#三元表达式","aria-hidden":"true"}},[t._v("#")]),t._v(" 三元表达式(?😃")]),t._v(" "),e("p",[t._v("x ? y : z 表示\nif(x){\ny;\n} else {\nz;\n}")]),t._v(" "),e("h3",{attrs:{id:"空合并运算符-："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空合并运算符-：","aria-hidden":"true"}},[t._v("#")]),t._v(" 空合并运算符(??)：")]),t._v(" "),e("p",[t._v("用于定义可空类型和引用类型的默认值。如果此运算符的左操作数不为null，则此运算符将返回左操作数，否则返回右操作数。\n例如：a??b 当a为null时则返回b，a不为null时则返回a本身。\n空合并运算符为右结合运算符，即操作时从右向左进行组合的。如，“a??b??c”的形式按“a??(b??c)”计算。")]),t._v(" "),e("h3",{attrs:{id:"可空类型修饰符（-）："}},[e("a",{staticClass:"header-anchor",attrs:{href:"#可空类型修饰符（-）：","aria-hidden":"true"}},[t._v("#")]),t._v(" 可空类型修饰符（?）：")]),t._v(" "),e("p",[t._v('引用类型可以使用空引用表示一个不存在的值，而值类型通常不能表示为空。\n例如：string str=null; 是正确的，int i=null; 编译器就会报错。\n为了使值类型也可为空，就可以使用可空类型，即用可空类型修饰符"？"来表示，表现形式为"T？"\n例如：int? 表示可空的整形，DateTime? 表示可为空的时间。\nT? 其实是System.Nullable(泛型结构）的缩写形式，也就意味着当你用到T？时编译器编译 时会把T？编译成System.Nullable的形式。\n例如：int?,编译后便是System.Nullable的形式。')]),t._v(" "),e("h3",{attrs:{id:""}},[e("a",{staticClass:"header-anchor",attrs:{href:"#","aria-hidden":"true"}},[t._v("#")]),t._v(" ?.")]),t._v(" "),e("p",[t._v("不为null时执行后面的操作")])])},[],!1,null,null,null);a.default=r.exports}}]);